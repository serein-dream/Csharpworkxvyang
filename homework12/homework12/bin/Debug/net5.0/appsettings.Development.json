{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  }
}
/*

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using homework12.Models;
using Microsoft.EntityFrameworkCore;

namespace homework12.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class OrderController : Controller
    {
        public OrderContext orderDB;

        public OrderController(OrderContext context)
        {
            orderDB = context;
        }

        //增
        // POST api/<controller>
        [HttpPost]
        public ActionResult<Order> Post(Order order)
        {
            try
            {
                orderDB.Orders.Add(order);
                orderDB.SaveChanges();
            }
            catch (Exception e)
            {
                return BadRequest(e.InnerException.Message);
            }
            return order;
        }
        //增加不对已存在id进行操作，故不用写httpPost{id}

        //删,对某id的订单进行精准删除
        // DELETE api/<controller>/{id}
        [HttpDelete("{id}")]
        public ActionResult<Order> Delete(string id)
        {
            try
            {
                Order od = orderDB.Orders.FirstOrDefault(o => o.OrderId == id);
                if (od != null)
                {
                    orderDB.Orders.Remove(od);
                    orderDB.SaveChanges();
                }
            }
            catch (Exception e)
            {
                return BadRequest(e.InnerException.Message);
            }
            return NoContent();
        }

        //改,根据id对特定订单进行精准更改
        // PUT api/<controller>/{id}
        [HttpPut("{id}")]
        public ActionResult<Order> Put(string id, Order order)
        {
            if (id != order.OrderId)
            {
                return BadRequest("Id不存在");
            }
            try
            {
                orderDB.Entry(order).State = EntityState.Modified;
                orderDB.SaveChanges();
            }
            catch (Exception e)
            {
                string error = e.Message;
                return BadRequest(error);
            }

            return NoContent();
        }


        //根据order id查询
        // GET api/<controller>/{id}
        [HttpGet("{id}")]
        public ActionResult<Order> Get(string id)
        {
            Order Torder = orderDB.Orders.FirstOrDefault(o => o.OrderId == id);
            return Torder;
        }
        
    }
}
*/